Strategy:
Probably only need delta SAP and CMS/ddG/SASA for interface filtering
Increase SAP tolerance somewhat
If disulfide stapled states are needed or wanted, just staple and predict

Back of the napkin numbers:
    ~2100 non-junctions
    *~17=34000 bound states,
    *75=2.6M designed bound states,
    *~.25=640k folded bound states,
    *~.5=320k paired bound states,
    *37=11.8M designed paired bound states,
    *~.05=592k folded paired bound states, (Y)
    *~.33=195k folded paired bound states, (X)
	TODO
    ~44000 junctions

dev TODOs:
    - loop instead of 21 repeats in 00_design
    - turn off precompute_ig to get deeper sampling and re-prototype
    - prototyping/plotting:
        - test total vs neighborhood vs difference only MSD with MPNN
        - test 0.1 vs 0.2 vs 0.5 temp for MPNN
    - remember to maintain the envs and repos on perlmutter and janelia clusters
    - Example notebooks for MPNN and superfold in crispy_shifty/examples
        - examples 2-4 with Abbas
            - show prototyping best practices
            - then figure out smooth setup
            - share with lab
    	- test folding with single pdb no fasta, pdb+fasta, and ...? TODO 
            - fix Abbas superfold submodule
            - get sudo access to superfold to add others
            - repredict AF2 intial guess folding.py the FF63-129 and cs_0-108 and JHB1-13
    - finalize env.yml (pip install typing-extensions==3.10.0.2) and build envs on digs, and janelia
        - do it when no one is has crispy env active
    - add crispy kernel to ipython kernelspecs on janelia
    - test python interpreter finding with git root on janelia
    - TODOs and docstrings in all modules - beta_nov16 notices in docstrings where used.
    - change crispy_shifty.plotting.utils.py to crispy_shifty.utils.plotting.py ; let Adam know
    - dask dataframe implementation in folding notebooks

    - if really bored, add documentation to the InsertResMover and PR

    - DOTFILES - check init.vim is working, then version control
    - rebalance states/parents after 03_fold or just go crazy?

TODO: 
    00 filter scaffold sets # run
    01 prep inputs # run # add slurm_logs loc for log_directory
    02 make states # change to array tasks? # run
    00 design bound states # determine how many nstruct # linmem_ig and turn off prune # run
    01 loop bound_states # test 0-1,2,3 adjustment per side comparison # probably want 0-2 # run
    02 MPNN bound states # figure out how many? probably 100 or so # run
    03 fold bound states # figure out how low to go with pae_interaction # run
    04 pair bound states # run
    05 design paired states # run
    06 MPNN paired states # make MPNN msd # run
    07 fold paired states_Y # run
    08 fold paired states_X # run
    09 detail and filter # staple? peptide resurf? refold? probably mostly rosetta filters # run
    10 order and analyze

Paper TODOs:
What will fig. 4 be:
FRET? NMR? photoswitching? negative cooperativity? 
crowdsource cool tricks, maybe ask some synbio people
use symbolic regression on flexdock trajectory datasets? 
networks learn to summarize rules about biophysical mechanics, 
then we use a seperate layer to regress equations

crispy snippy TODOs:
fluo polarization for protease or fluorophore/quencher?

